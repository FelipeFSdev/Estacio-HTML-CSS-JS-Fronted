- Linguagem de programação: 
    O javascript, comumente chamado de JS, completa o que
    pode ser chamado de "triplice aliança do frontend". A
    linguagem originalmente criada para aplicações web, é
    responsável pelo comportamento e interatividade entre
    demais páginas.
    Atualmente possui suporte para desenvolvimento server
    side com o pacote "nodejs", trata-se de uma linguagem
    multiparadigma e diferentes frameworks possibilitando
    o desenvolvimento mobile também.

- Interface DOM:
    Abreviação de Modelo de Objeto de Documento, trata-se
    de uma interface para manipulação de documentos HTML.
    Essa estrutura de árvores permite o acesso de objetos
    com propriedades, métodos e eventos a fim de recuperar
    conteúdo textual e até alterar o seu valor se preciso.
    Uma observação importante a se fazer é que a árvore
    DOM não faz parte de nenhuma linguagem de programação
    específica, podendo ser manipulada por diferentes PL.

- Incoporando a linguagem ao HTML:
    Para iniciar o desenvolvimento com javascript, deve-se
    primeiramente fazer a instalação de editories de texto
    como o VSCODE, notepad++, etc.
    Feito isto e com arquivo HTML gerado, basta adicionar, 
    dentro da tag <script> na seção <head> os códigos que 
    serão usados. Pode-se também dar preferência a arquivos
    externos ".js" (também no <head> da página).
    Obs: Para melhor desempenho na renderização de páginas
    recomenda-se a moção do código javascript para o final
    da página, após fechamento do <body>.

- Sintaxe javascript:
    Javascript é uma linguagem fracamente tipada, ou seja,
    não possui necessidade de especificação de tipos de 
    dados para suas variáveis, o que pode ser um problema
    para algumas pessoas e/ou uma qualidade para outras.
    A declaração de variáveis, então, torna-se bem simples
    com a uso das palavras reservadas "var"(que por sua 
    vez não é mais tão utilizada por apresentar problemas
    em sua "interpretação" ao renderizar páginas), "let"
    (para variáveis que possam ter valor alterado) e "const"
    (para variáveis que não terão alteração no seu valor
    original); seguidas apenas de seu nome e da atribuição
    (opcional) de seu valor.
    Ex:
        var variavel1 = true;
        let variavel2 = 123;
        const variavel3 = "quatro";
        let varNaoIniciada;
    obs: Javascript possui suporte para utilização de 
    aspas simples ou duplas para dados do tipo "string",
    e possui o uso de ponto e vírgula opcional, porém, 
    recomendado para melhor visualização do final de um
    escopo.

- Métodos para páginas web:
    alert(): Exibe uma caixa de mensagem no navegador
    O método recebe como parâmetro a mensagem a ser
    exibida;
    prompt(): Exibe uma caixa para entrada entrada de 
    dados com a mensagem passada como parâmetro.
    document.getElementById(): Referencia um elemento
    da árvore DOM a partir do seu ID.
    function: Indica criação de uma função (bloco de 
    código que executa diferentes ações para uma
    resposta);
    return: Indica o encerramento de uma função após
    todas as ações serem concluídas. O return é pode
    ser associada a resposta da função.

- Funções: 
    Pode ser definido como blocos de código que executam
    determinada tarefa.
    Blocos de código, como o nome indica, possuem várias
    linhas de código, com métodos, váriaveis locais, 
    operações e retornos a fim de exercer uma função
    específica quando for "chamada".
    Essa ferramenta é especialmente importante para evitar
    a escrita de códigos repetidos, facilitando assim, a 
    manutenção e aumentando a produtividade.
    Ao criar funções é importante entender conceitos de 
    escopo. Variáveis criadas dentro de uma função possuem
    escopo local, ou seja, não podem ser acessadas por 
    outras partes do código que estejam fora da função;
    por outro lado, funções podem acessar variáveis
    declaradas no escopo geral do projeto, estas são 
    caracterizadas como "globais".
    Sua sintaxe possui particularidades a depender do 
    contexto em que está sendo usada. Ao trabalhar com 
    javascript para desenvolvimento do lado servidor,
    com nodejs, é possível identificar funções no padrão
    "arrow function". No desenvolvimento web, porém, o 
    mais comum é utilizar a declaração "padrão", com a
    palavra reservada, seguida do nome da função e seus
    parênteses, abrindo escopo da função com chaves.
    Ex:
        **arrow function
            const nomeDaFuncao = ()=>{
                //todo código abaixo
            };
        **declaração padrão
            function nomeDaFuncao(){
                //todo código abaixo
            };
    Outro aspecto importante para ressaltar são os 
    parâmetros. Também chamados de argumentos, eles
    assumem o papel de indicar que uma função receberá
    um valor para que sua execução seja possível. 
    Ex:
        function nomeDaFuncao(arg1, arg2){
            return arg1 + arg2;
        };
    Dessa forma, ao "chamar" a função, esta retornará
    o resultado da soma dos valores passados dentro
    dos parênteses.
    Ex:
        nomeDaFuncao(49,51)
        **retorno: 100
        nomeDaFuncao("Bom", "dia")
        **retorno: Bomdia
- Objetos:
    Assim como em outras linguagens de programação, os objetos
    em javascript podem ser interpretados como traduções do
    mundo real para o contexto de software. Isto quer dizer 
    que, assim como no mundo real, objetos possuem formatos
    específicos e com diferentes características. Por exemplo,
    quando fala-se sobre celulares é importante entender quais
    funções e propriedades físicas de um celular, como cor, 
    marca, tamanho, quantidade de botões, função para ligar, 
    tirar foto e enviar mensagens. Traduzindo para objetos
    tem-se:
        celular:{
            cor:
            marca:
            tamanho:
            qtdBotões:
            powerOnOff()
            tirarFoto()
            enviarMensagens()
        }
    Desta forma, é possível atribuir uma série de características
    referentes a uma váriavel, utilizando apenas um endereço
    de memória (reduzindo o "custo" de hardware).
    Nota-se também a diferença entre propriedades (ou atributos)
    comuns e métodos.
    obs: o acesso a essas propriedades é feita a partir da
    referência ao objeto com seu nome seguido do ponto e 
    nome da propriedade desejada (Ex: celular.cor).

- Estruturas de decisão:
    Também conhecidas como condicionais são "perguntas"
    feitas ao código a fim de ditar e/ou alterar o 
    fluxo do código através de operações lógicas de 
    resultado booleano, ou seja, apenas dois valores
    possíveis (verdadeiro ou falso).
    Assim como a maioria das linguagens, o javascript
    segue o padrão de escrita inglês, ou seja, toda a
    sua sintaxe possui palavras reservadas no padrão
    US.
    É possível realizar a construção de uma condicional,
    usando as palavras reservadas, if/else, que significam
    se/senão. A declaração da estrutura se faz inciando com
    a palavra reservada if, seguida  de parênteses, os
    quais receberão a operação lógica a ser testada pelo 
    programa; e por fim, o escopo da estrutura definida 
    por chaves{}.
    Ex:
        const a=2, b=3
        if(a>b){
            alert("A maior que B");
        } else if (a<b){
            alert("A menor que B");
        } else{
            alert("A igual a B);
        };
    Traduzindo o código para português, tem-se que 
    o programa irá mostrar uma caixa de diálogo no 
    navegador dizendo que a variável "a" é menor,
    maior ou igual a variável "b" a partir da sua
    verificação. Se "a > b" for verdadeiro, alerta
    de "A maior que B", e assim por diante.
    As estrutura podem seguir diferentes modelos
    sendo apenas o if() simples (sem else), if() com
    else ou else if(). É possível também realizar 
    mais de uma verificação dentro de um parâmetro if
    usando os operadores &&, ||, !.
    Ex:
        const a=2, b=3, c=2
        if(a !== b && a === c){
            alert("A é diferente de B e igual a C");
        } else if(b > a || b > c){
            alert("B é maior que A ou maior que C");
        };
    Outra estrutura de decisão possível de ser feita 
    em javascript é a estrutura switch/case. Essa em
    questão possui um trabalho similar ao else if, 
    porém, de forma mais legível. A estrutura é iniciada
    com o switch(), seguido do seu parâmetro, e depois 
    é definido quais as possíveis instruções para 
    determinados valores, caso a variável do parâmetro 
    for igual a 1, retorne "variavel igual a 1" e assim
    por diante. É importante lembrar que o switch/case
    sempre será chamado para fazer as verificações uma
    após a outra, sendo necessário o uso do "break",
    para interromper sua execução.
    Ex:
        const variavel =prompt("digite um valor");
        switch(variavel){
            case < 0: 
            alert("variavel menor que 0");
            break;
            case > 0:
            alert("variavel maior que 0");
            break;
            default:
            alert("Nenhum case cumprido");
            break;
        };
    Nota-se no exemplo acima o uso de um novo método,
    "default". O default, dentro do switch/case, nada
    mais é que o "else" do if/else, ou seja, se nenhuma
    das condições forem verdadeiras o comportamento 
    padrão do sistema será realizar aquela instrução,
    no caso, "alert('nenhum case cumprido')".

- Estruturas de repetição:
    Assim como as condicionais, loops do java script
    parecem bem familiares para pessoas que já possuem
    conhecimento em outras linguagens.
    Dentre os diferentes tipos de laços de repetição,
    o mais tradicional é o "for de C", no qual é 
    declarado uma variável contadora, uma condição a 
    ser seguida, e uma ação a ser feita até que a 
    condição seja cumprida.
    Ex:
        for(const i = 0; i < 10; i++){
            alert(i)
        }
    Enquanto i, a variável contadora, for menor que 
    10, ela será incrementada com +1 e o navegador 
    irá emitir uma caixa de diálogo com o número da 
    variável em questão.
    Outras opções do uso do "for" é o for/in e for/of,
    estes são comumente utilizados ao fazer "varrimento"
    em "listas", também conhecidos como arrays.
    Ex:
        const array = [1,2,3,4,5]
        for(const i of array){
            alert(i)
        };
        for(const i in array){
            alert(i)
        };
    Apesar da sua sintaxe praticamente idêntica, os
    dois exemplos acima possuem retornos diferentes.
    O for/of traz de forma literal como resposta o
    elemento do array, ou seja, será mostrado os numeros
    de 1 a 5. O for/in, por sua vez, trabalha trazendo
    apenas o índice de cada elemento, retornando por
    exemplo do 0 ao 4; é também utilizado para "iterar"
    sobre objetos enumerados, trazendo o nome de suas
    propriedades/atributos.
    Ex:
        const obj1 = {
            a:1,
            b:2,
            c:3,
        }
        for(const i in obj1){
            alert(i)
        };
    A resposta será: a, b, c.
    Visto sobre os diferentes tipos de "for", tem-se
    também os laços while e do/while.
    O while recebe uma variável contadora a qual será
    verificada a condição lógica, enquanto o resultado
    for "false", executa uma ação. O do/while possui
    um processo semelhante, dessa vez, porém, executando
    uma ação primeiro e depois fazendo a verificação.
    Ex:
        let contador = 0;
        while(contador < 10){
            alert(contador);
            contador++;
        }
        contador = 0;
        do{
            contador++;
            alert(contador)
        } while(contador<10)
    Nos casos acima, o while terá seu contador incrementado
    até chegar em 9 e será encerrado o laço. No do/while,
    o contador segue sendo incrementado até atingir o valor
    10, pois sua verificação só será testada após a soma do
    valor.